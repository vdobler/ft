#
#  Reference Suite for Webtest
# ===============================
#
# Webtest test suites are simple text files in UTF-8 (without BOM).
# Line endings may be \n or \r\n and you are stubid _and_ ugly if you use
# the later.  The line length should not exeed 4000 characters.
#
# Lines "starting" with a # are comments and are ignored. The # need
# not be the very first character on a line: # is considered 'start of
# comment' iff it is the first non-whitespace charater on a line.
#
# Individual test cases are intruduced like this (test case name surrounded
# by lines of - signs):
# ------------------------------------
# The Name of the Test Case
# ------------------------------------
# See below: Global is such a testcase. Unfortunately Global is as 
# very special testcase. So please skip to the "Ping" test case.
#
  
-------------------------------  
Global
-------------------------------
GET http://unused.for/global
RESPONSE
	# Normly we expect to get 200. Overwrite in test if you need to 
	# test for e.g. 404
	Status-Code == 200
SETTINGS
	# Any request taking longer than 45 seconds is considered an error.
	Max-Time  45000
CONST
	# The global BaseUrl of our test server.
	BaseUrl   http://localhost:8080

	
#
# General Structure of Test Cases
# -------------------------------
#
# The most basic and simple test case: See if a server answers.
#
# After the test case header (-------\n<Name>\n-------) several
# sections describe various aspects of the test. A Section is intruduced
# by an all caps section name starting at the first character of a line.
# Individual setting in a setting are indented by (at least) a tab '\t'.
#
# The first section is special: It names the request method and URL and 
# must be the first section, cannot be omitted an has no sub-elements.
# All other section are optional and may occur in any order. Thing Ping
# test below contains just the RESPONSE section.
---------------------------------
Ping
---------------------------------
# Method may be "GET" or "POST". The URL must be a valid, full qualified 
# URL.
GET http://host.to.ping/path.html

# The response section: In this section the various header fields of the
# response can be checked. 
RESPONSE
	# Check that the server answered with 200 status code.
	Status-Code	 ==  200

# Thats all for the ping test case


#
# Checking Response Header Fields
# -------------------------------
#
# More on response fields checking: Recieved header fields can be accessed
# by their name (no trailing colon), e.g. "Content-Type". 
# There are two special fields which can be checked allways, even if the
# server didn't include them in the response header: "Status-Code" and
# "Final-Url". Status-Code is the numerical status code and Final-Url is
# the URL reached after doing all the redirects requested by the server.
#
# There are several ways to test the recieved value.
---------------------------------
Ping Enhanced
---------------------------------
GET http://host.to.ping/path.html

RESPONSE
	 # Operator == is for real equality
	 Status-Code	 ==  200
	
	 # Operator ~= test for "contains"
	 Content-Type  ~= text/html
	 
	 # Operator /= test for a regualr expression matching the field value
	 Strange-Field  /= (cat?|^dog?) .+$

	 # Operator _= test for the field value starting with the given prefix
	 Other-Header  _= StartPrefix

 	 # Operator =_ test for the field value ending with the given suffix
	 Something     =_ EndSuffix
	 
	 # For field which are numeric you may use <, <=, ==, >= or > with the
	 # usual meaning.
	 Content-Length  > 500
	 
	 # To negate a condition: Prefix the whole condition with a ! charcter.
	!App-Field ~= Illegal
	
	 # To disalow the mere existence of a header field:
	!Illegal-Header
	
	 # Generally there is no need to quote field names or values to test
	 # against: field names do not contain whitespace or special characters
	 # and values are just the rest after the operator with leading and
	 # trailung whitespace trimmed.
	 # If you do need these leading or trailing whitespaces: Enclose the
	 # value with " marks:
	 Field-Name == "  spaces at begin and end are important for the test  "
	 
	
#
# Setting Request Header fields
# -----------------------------
#
# You may specify any request header field in the HEADER section by just
# naming them and their value.
---------------------------------
Ping With Header
---------------------------------
GET http://host.to.ping/path.html

# The header section: add special request header fields here.
HEADER
	# add the Accept-Language fields with given value. Note: No colon (:)
	Accept-Language  de,fr,en
	# Quotes could be used around the value to include leading or trailing
	# spaces, but request header fields normaly do not contain spaces at 
	# all.

	
#
# Testing the Response Body
# -------------------------
# There are three ways to test the content of the recieved body:
# Simple tests are specified in the BODY section, HTML tags can be checked
# in the TAG section.
---------------------------------
Ping Content
---------------------------------
GET http://host.to.ping/path.html

# All simple test are placed in the body section
BODY
	 # Txt is the whole text of the body
	 Txt  ==  Whole text of body
	 # Attention: Only UTF-8 encoded bodys work well.
	 
	 # Bin ist the whole text of the body as hexadecimal string
	 Bin  == 0daf23bcad873f94
	 # Note: Syntax may change in the future
	 
	 # The same operators (without the numerical ones) like in the response
	 # section can be used with with Txt and Bin: ~=, _=, =_ and /=
	 
	 # Use something like this to check if a binary file starts with the
	 # appropriate magic key (png magic key below)
	 Bin  _=  89504e470d0a1a0a
	 
# HTML/XML tag/element checkings are placed in section TAG
# Syntax for the tags are like checktag. See documentation in tag.go 
TAG
	# Check if any h2 tag with a class of 'home' and text content of
	# 'Quality' is present
	h2 class=home == Quality
		
	# Fail if a h1 tag with content 'WRONG' is present
	! h5 == WRONG
	
	# Count occurences of this div tag with CSS class teaser: 
	# Must be exactly 3
	=3	div class=teaser
	
	# span tags may not be present 2 times (0, 1, 3, .. or 17) is okay
	!=2 span == xyz
	
	# Fail if there are more than 4 a tag linking to /somewhere.html.
	<5  a href=/somewhere.html
	
	# The rest of the numerical operators are <=, >= and > and work like
	# expected.
	# Negations are discuraged (but allowed): !<=, !>=, !< and !>

	# Tag structures (nested tags) are introduced by '[' and ended by ']'
	# Each on a own line.
	[
		div class=A
			div class=B
				ul
	]
	
	# Negation '!' and counting operators may be placed before the [.
	# Test if this div with span element occurs at least 5 times.
	>4 [
			div class=X
				span == Test
	   ]


#
# Sending Parameters
# ------------------
#
# Arbitary parameters can be specified in the PARAM section. 
# For GET requests they are appended to the given URL. POST requests 
# are currently sent as "form-urlencoded" (multipart will be added soon).
# 
---------------------------------
Post a Comment
---------------------------------
POST http://my.blog/comment.html
PARAM
	name	Grigori Perelman
	text	A Proof of the Poincare Conjecture

	
#
# Variable Subtitutions
# ---------------------
#
# There are three types of variable substitutions, all can be used shell
# variables: A variable can be asigned a value and used as part of the URL,
# part of header, response, body or parameter values.  The usage is allways
# the same: Occurences of ${varname} are replaced by the value of the 
# varibale varname. But there are three ways to set a value for a variable:
# CONST variables just take a value, there use is obious. Furthermore there
# are SEQ (sequence) and RAND (random) values, there (reasonable) use is 
# limited to repeated test. SEQ and RAND values take values of a given list 
# of possible values. SEQ cycles through the list in the given order, wheras
# RAND picks one value by random.
#
---------------------------------
Test Archive
---------------------------------
# Usage of a variable: ${BaseUrl} is replace by const value set bolow.
# resulting in URL beeing http://my.blog/entrieshttp://my.blog/entries
GET ${BaseUrl}http://my.blog/entries
PARAM
	month 	${Month}
	year	${Year
CONST
	# Set value of BaseUrl to http://my.blog/entries. Note: No = sign!
	BaseUrl http://my.blog/entries
SEQ
	# Month will be 1 on first run of test, 2 on second, and so on.
	# Will restart beeing 1 on 13th run of test.
	Month	1 2 3 4 5 6 7 8 9 10 11 12
RAND
	# Year is one of the given four selected randomly on each test run.
	Year 	2004 2005 2006 2007
	# Values with spaces 'Emil Tom' must be enclosed in quotes.
	Name	Anna "Emil Tom" Vicktoria 
SETTING
	# Repeat the test 7 times.
	Repeat	7


#
# Settings
# --------
#
# Various setting can be applied to each and every test in the SETTING
# section. Currently the following are (or will be) implemented.
#
---------------------------------
Repeated Ping
---------------------------------
GET http://host.to.ping/path.html
RESPONSE
	Status-Code	 ==  200
SETTING
	# Number of repetitions of the test
	Repeat		12
	# Fail if answer is not recievd in less than 300 ms.
	Max-Time	300
	# Keep (store in Global) cookies set by the server answer
	Keep-Cookies	true
	

#
# Cookies
# -------
-------------------
Cookies
--------------------
GET someUrl
SEND-COOKIE
	SESSIONID	123ABCxyz
SET-COOKIE
	just-present
	has-value    ~= in-val
	all          == value; Path=/; Secure
	
	
#
# Global
# ------
#
# If the very first test in a test suite is named "Global" than this test
# will not be run, but serve as a template for all subsequent tests:
# Settings, Variables, Header fields and Response checks are inherited
# from global to each test. The test may overwrite them. Body and Tag
# checks cannot be overwritten (as the do not contain some uniq id to
# identify them): Body and Tag conditions/checks from global are just
# added to each test.
#
# See Global-"Test" above for an example

