diff -r 5bf3a11773f7 src/pkg/xml/xml.go
--- a/src/pkg/xml/xml.go	Mon May 30 20:19:56 2011 +1000
+++ b/src/pkg/xml/xml.go	Thu Jun 02 01:01:01 2011 +0200
@@ -659,17 +659,22 @@
 			return nil, p.err
 		}
 		if b != '=' {
-			p.err = p.syntaxError("attribute name without = in element")
-			return nil, p.err
+			if p.Strict {
+				p.err = p.syntaxError("attribute name without = in element")
+				return nil, p.err
+			} else {
+				p.ungetc(b)
+				a.Value = a.Name.Local
+			}
+		} else {
+			p.space()
+			data := p.attrval()
+			if data == nil {
+				return nil, p.err
+			}
+			a.Value = string(data)
 		}
-		p.space()
-		data := p.attrval()
-		if data == nil {
-			return nil, p.err
-		}
-		a.Value = string(data)
 	}
-
 	if empty {
 		p.needClose = true
 		p.toClose = name
diff -r 5bf3a11773f7 src/pkg/xml/xml_test.go
--- a/src/pkg/xml/xml_test.go	Mon May 30 20:19:56 2011 +1000
+++ b/src/pkg/xml/xml_test.go	Thu Jun 02 01:01:01 2011 +0200
@@ -445,6 +445,33 @@
 	}
 }
 
+func TestValuelessAttrs(t *testing.T) {
+	tests := [][3]string{
+		{"<p nowrap>", "p", "nowrap"},
+		{"<p nowrap >", "p", "nowrap"},
+		{"<input checked/>", "input", "checked"},
+		{"<input checked />", "input", "checked"},
+	}
+	for _, test := range tests {
+		p := NewParser(StringReader(test[0]))
+		p.Strict = false
+		token, err := p.Token()
+		if _, ok := err.(*SyntaxError); ok {
+			t.Errorf("Unexpected error: %v", err)
+		}
+		if token.(StartElement).Name.Local != test[1] {
+			t.Errorf("Unexpected tag name: %v", token.(StartElement).Name.Local)
+		}
+		attr := token.(StartElement).Attr[0]
+		if attr.Value != test[2] {
+			t.Errorf("Unexpected attribute value: %v", attr.Value)
+		}
+		if attr.Name.Local != test[2] {
+			t.Errorf("Unexpected attribute name: %v", attr.Name.Local)
+		}
+	}
+}
+
 func TestCopyTokenCharData(t *testing.T) {
 	data := []byte("same data")
 	var tok1 Token = CharData(data)
